// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231207225111_removed w number")]
    partial class removedwnumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CampusInstructorWishlistCourse", b =>
                {
                    b.Property<int>("CampusesId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorWishlistCoursesId")
                        .HasColumnType("int");

                    b.HasKey("CampusesId", "InstructorWishlistCoursesId");

                    b.HasIndex("InstructorWishlistCoursesId");

                    b.ToTable("CampusInstructorWishlistCourse");
                });

            modelBuilder.Entity("CampusStudentWishlistCourse", b =>
                {
                    b.Property<int>("CampusesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentWishlistCourseId")
                        .HasColumnType("int");

                    b.HasKey("CampusesId", "StudentWishlistCourseId");

                    b.HasIndex("StudentWishlistCourseId");

                    b.ToTable("CampusStudentWishlistCourse");
                });

            modelBuilder.Entity("Infrastructure.Models.AcademicProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("AcademicPrograms");
                });

            modelBuilder.Entity("Infrastructure.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Infrastructure.Models.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Infrastructure.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomCapacity")
                        .HasColumnType("int");

                    b.Property<string>("ClassroomDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassroomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Infrastructure.Models.ClassroomFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("ClassroomFeatures");
                });

            modelBuilder.Entity("Infrastructure.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorCreditHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("StudentCreditHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Infrastructure.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InstructorTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Infrastructure.Models.InstructorWishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SemesterInstanceId");

                    b.ToTable("InstructorWishlists");
                });

            modelBuilder.Entity("Infrastructure.Models.InstructorWishlistCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorWishlistId")
                        .HasColumnType("int");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorWishlistId");

                    b.ToTable("InstructorWishlistCourses");
                });

            modelBuilder.Entity("Infrastructure.Models.LoadRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("LoadReqHours")
                        .HasColumnType("int");

                    b.Property<int>("SemesterInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SemesterInstanceId");

                    b.ToTable("LoadRequirements");
                });

            modelBuilder.Entity("Infrastructure.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("Infrastructure.Models.Modality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCampuses")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTimeBlocks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modalitys");
                });

            modelBuilder.Entity("Infrastructure.Models.PartOfTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("PartOfTermTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartOfTerms");
                });

            modelBuilder.Entity("Infrastructure.Models.PayModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("PayModelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayModels");
                });

            modelBuilder.Entity("Infrastructure.Models.PayOrg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("PayOrgTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayOrgs");
                });

            modelBuilder.Entity("Infrastructure.Models.PrereqCourseAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("PrereqCourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrereqCourseId");

                    b.ToTable("PrereqCourseAssignments");
                });

            modelBuilder.Entity("Infrastructure.Models.ReleaseTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseTimeAmount")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseTimeNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterInstanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SemesterInstanceId");

                    b.ToTable("ReleaseTimes");
                });

            modelBuilder.Entity("Infrastructure.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerCRN")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentEnrollment")
                        .HasColumnType("int");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinalEnrollment")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("MaxEnrollment")
                        .HasColumnType("int");

                    b.Property<int?>("ModalityId")
                        .HasColumnType("int");

                    b.Property<int?>("PartOfTermId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SectionBannerUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionTimeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SectionUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("SemesterInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("Waitlist")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ModalityId");

                    b.HasIndex("PartOfTermId");

                    b.HasIndex("SectionStatusId");

                    b.HasIndex("SectionTimeId");

                    b.HasIndex("SemesterInstanceId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Infrastructure.Models.SectionPay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("CreditHours")
                        .HasColumnType("real");

                    b.Property<int?>("PayModelId")
                        .HasColumnType("int");

                    b.Property<int?>("PayOrgId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayModelId");

                    b.HasIndex("PayOrgId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionPays");
                });

            modelBuilder.Entity("Infrastructure.Models.SectionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("SectionStatusColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionStatuses");
                });

            modelBuilder.Entity("Infrastructure.Models.SectionTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<int>("DaysPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("SectionTimes");
                });

            modelBuilder.Entity("Infrastructure.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DefaultLoad")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Infrastructure.Models.SemesterInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SemesterEndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterInstanceStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SemesterRegistrationEnd")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SemesterRegistrationStart")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SemesterStartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SemesterInstanceStatusId");

                    b.ToTable("SemesterInstances");
                });

            modelBuilder.Entity("Infrastructure.Models.SemesterInstanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterInstanceStatuses");
                });

            modelBuilder.Entity("Infrastructure.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentWishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SemesterInstanceId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterInstanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentWishlists");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentWishlistCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentWishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentWishlistId");

                    b.ToTable("StudentWishlistCourses");
                });

            modelBuilder.Entity("Infrastructure.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Infrastructure.Models.TemplateAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("FaceToFaceCount")
                        .HasColumnType("int");

                    b.Property<int>("FlexCount")
                        .HasColumnType("int");

                    b.Property<int>("HybridCount")
                        .HasColumnType("int");

                    b.Property<int>("OnlineCount")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.Property<int>("VirtualCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateAssignments");
                });

            modelBuilder.Entity("Infrastructure.Models.TimeBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("TimeBlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeBlockTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeBlockTypeId");

                    b.ToTable("TimeBlocks");
                });

            modelBuilder.Entity("Infrastructure.Models.TimeBlockType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeBlockTypes");
                });

            modelBuilder.Entity("InstructorWishlistCourseModality", b =>
                {
                    b.Property<int>("InstructorWishlistCoursesId")
                        .HasColumnType("int");

                    b.Property<int>("ModalitiesId")
                        .HasColumnType("int");

                    b.HasKey("InstructorWishlistCoursesId", "ModalitiesId");

                    b.HasIndex("ModalitiesId");

                    b.ToTable("InstructorWishlistCourseModality");
                });

            modelBuilder.Entity("InstructorWishlistCourseTimeBlock", b =>
                {
                    b.Property<int>("InstructorWishlistCoursesId")
                        .HasColumnType("int");

                    b.Property<int>("TimeBlocksId")
                        .HasColumnType("int");

                    b.HasKey("InstructorWishlistCoursesId", "TimeBlocksId");

                    b.HasIndex("TimeBlocksId");

                    b.ToTable("InstructorWishlistCourseTimeBlock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModalityStudentWishlistCourse", b =>
                {
                    b.Property<int>("ModalitiesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentWishlistCourseId")
                        .HasColumnType("int");

                    b.HasKey("ModalitiesId", "StudentWishlistCourseId");

                    b.HasIndex("StudentWishlistCourseId");

                    b.ToTable("ModalityStudentWishlistCourse");
                });

            modelBuilder.Entity("StudentWishlistCourseTimeBlock", b =>
                {
                    b.Property<int>("StudentWishlistCourseId")
                        .HasColumnType("int");

                    b.Property<int>("TimeBlocksId")
                        .HasColumnType("int");

                    b.HasKey("StudentWishlistCourseId", "TimeBlocksId");

                    b.HasIndex("TimeBlocksId");

                    b.ToTable("StudentWishlistCourseTimeBlock");
                });

            modelBuilder.Entity("Infrastructure.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CampusInstructorWishlistCourse", b =>
                {
                    b.HasOne("Infrastructure.Models.Campus", null)
                        .WithMany()
                        .HasForeignKey("CampusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.InstructorWishlistCourse", null)
                        .WithMany()
                        .HasForeignKey("InstructorWishlistCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampusStudentWishlistCourse", b =>
                {
                    b.HasOne("Infrastructure.Models.Campus", null)
                        .WithMany()
                        .HasForeignKey("CampusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.StudentWishlistCourse", null)
                        .WithMany()
                        .HasForeignKey("StudentWishlistCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.AcademicProgram", b =>
                {
                    b.HasOne("Infrastructure.Models.Instructor", null)
                        .WithMany("ProgramAffiliation")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("Infrastructure.Models.Building", b =>
                {
                    b.HasOne("Infrastructure.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Infrastructure.Models.Classroom", b =>
                {
                    b.HasOne("Infrastructure.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Infrastructure.Models.ClassroomFeature", b =>
                {
                    b.HasOne("Infrastructure.Models.Classroom", null)
                        .WithMany("Features")
                        .HasForeignKey("ClassroomId");
                });

            modelBuilder.Entity("Infrastructure.Models.Course", b =>
                {
                    b.HasOne("Infrastructure.Models.AcademicProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Infrastructure.Models.Instructor", b =>
                {
                    b.HasOne("Infrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Infrastructure.Models.InstructorWishlist", b =>
                {
                    b.HasOne("Infrastructure.Models.Instructor", "Instructor")
                        .WithMany("InstructorWishlists")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.SemesterInstance", "SemesterInstance")
                        .WithMany()
                        .HasForeignKey("SemesterInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("SemesterInstance");
                });

            modelBuilder.Entity("Infrastructure.Models.InstructorWishlistCourse", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.InstructorWishlist", "InstructorWishlist")
                        .WithMany()
                        .HasForeignKey("InstructorWishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("InstructorWishlist");
                });

            modelBuilder.Entity("Infrastructure.Models.LoadRequirement", b =>
                {
                    b.HasOne("Infrastructure.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.SemesterInstance", "SemesterInstance")
                        .WithMany()
                        .HasForeignKey("SemesterInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("SemesterInstance");
                });

            modelBuilder.Entity("Infrastructure.Models.PrereqCourseAssignment", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Course", "PrerequisiteCourse")
                        .WithMany()
                        .HasForeignKey("PrereqCourseId");

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("Infrastructure.Models.ReleaseTime", b =>
                {
                    b.HasOne("Infrastructure.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.SemesterInstance", "SemesterInstance")
                        .WithMany()
                        .HasForeignKey("SemesterInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("SemesterInstance");
                });

            modelBuilder.Entity("Infrastructure.Models.Section", b =>
                {
                    b.HasOne("Infrastructure.Models.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");

                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("Infrastructure.Models.Modality", "Modality")
                        .WithMany()
                        .HasForeignKey("ModalityId");

                    b.HasOne("Infrastructure.Models.PartOfTerm", "PartOfTerm")
                        .WithMany()
                        .HasForeignKey("PartOfTermId");

                    b.HasOne("Infrastructure.Models.SectionStatus", "SectionStatus")
                        .WithMany()
                        .HasForeignKey("SectionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.SectionTime", "SectionTime")
                        .WithMany("Sections")
                        .HasForeignKey("SectionTimeId");

                    b.HasOne("Infrastructure.Models.SemesterInstance", "SemesterInstance")
                        .WithMany()
                        .HasForeignKey("SemesterInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Modality");

                    b.Navigation("PartOfTerm");

                    b.Navigation("SectionStatus");

                    b.Navigation("SectionTime");

                    b.Navigation("SemesterInstance");
                });

            modelBuilder.Entity("Infrastructure.Models.SectionPay", b =>
                {
                    b.HasOne("Infrastructure.Models.PayModel", "PayModel")
                        .WithMany()
                        .HasForeignKey("PayModelId");

                    b.HasOne("Infrastructure.Models.PayOrg", "PayOrg")
                        .WithMany()
                        .HasForeignKey("PayOrgId");

                    b.HasOne("Infrastructure.Models.Section", "Section")
                        .WithMany("SectionPays")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayModel");

                    b.Navigation("PayOrg");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Infrastructure.Models.SemesterInstance", b =>
                {
                    b.HasOne("Infrastructure.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.SemesterInstanceStatus", "SemesterInstanceStatus")
                        .WithMany()
                        .HasForeignKey("SemesterInstanceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");

                    b.Navigation("SemesterInstanceStatus");
                });

            modelBuilder.Entity("Infrastructure.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Models.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId");

                    b.HasOne("Infrastructure.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentWishlist", b =>
                {
                    b.HasOne("Infrastructure.Models.SemesterInstance", "SemesterInstance")
                        .WithMany()
                        .HasForeignKey("SemesterInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Student", "Student")
                        .WithMany("StudentWishlists")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterInstance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Models.StudentWishlistCourse", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.StudentWishlist", "StudentWishlist")
                        .WithMany()
                        .HasForeignKey("StudentWishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("StudentWishlist");
                });

            modelBuilder.Entity("Infrastructure.Models.Template", b =>
                {
                    b.HasOne("Infrastructure.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Infrastructure.Models.TemplateAssignment", b =>
                {
                    b.HasOne("Infrastructure.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Infrastructure.Models.TimeBlock", b =>
                {
                    b.HasOne("Infrastructure.Models.TimeBlockType", "TimeBlockType")
                        .WithMany()
                        .HasForeignKey("TimeBlockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeBlockType");
                });

            modelBuilder.Entity("InstructorWishlistCourseModality", b =>
                {
                    b.HasOne("Infrastructure.Models.InstructorWishlistCourse", null)
                        .WithMany()
                        .HasForeignKey("InstructorWishlistCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Modality", null)
                        .WithMany()
                        .HasForeignKey("ModalitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstructorWishlistCourseTimeBlock", b =>
                {
                    b.HasOne("Infrastructure.Models.InstructorWishlistCourse", null)
                        .WithMany()
                        .HasForeignKey("InstructorWishlistCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.TimeBlock", null)
                        .WithMany()
                        .HasForeignKey("TimeBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModalityStudentWishlistCourse", b =>
                {
                    b.HasOne("Infrastructure.Models.Modality", null)
                        .WithMany()
                        .HasForeignKey("ModalitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.StudentWishlistCourse", null)
                        .WithMany()
                        .HasForeignKey("StudentWishlistCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentWishlistCourseTimeBlock", b =>
                {
                    b.HasOne("Infrastructure.Models.StudentWishlistCourse", null)
                        .WithMany()
                        .HasForeignKey("StudentWishlistCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.TimeBlock", null)
                        .WithMany()
                        .HasForeignKey("TimeBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Classroom", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("Infrastructure.Models.Course", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Infrastructure.Models.Instructor", b =>
                {
                    b.Navigation("InstructorWishlists");

                    b.Navigation("ProgramAffiliation");
                });

            modelBuilder.Entity("Infrastructure.Models.Section", b =>
                {
                    b.Navigation("SectionPays");
                });

            modelBuilder.Entity("Infrastructure.Models.SectionTime", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Infrastructure.Models.Student", b =>
                {
                    b.Navigation("StudentWishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
