@namespace CASPAR.Pages.Schedule.Builder
@using CASPAR.ViewModels;
@using Infrastructure.Models;

@if (Ready)
{
    <div>
        <button class="w-full text-left flex items-center justify-between gap-2" @onclick="ToggleFilter">
            @if (AllInstructorWishlists.Count() > 0)
            {
                @if (Filtered)
                {
                    if (RemainingInstructorWishlists.Count() > 0)
                    {
                        <span class="text-base font-bold">Remaining Instructor Requests</span>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"
                             class="w-5 h-5">
                            <path d="M15.5 2A1.5 1.5 0 0014 3.5v13a1.5 1.5 0 001.5 1.5h1a1.5 1.5 0 001.5-1.5v-13A1.5 1.5 0 0016.5 2h-1zM9.5 6A1.5 1.5 0 008 7.5v9A1.5 1.5 0 009.5 18h1a1.5 1.5 0 001.5-1.5v-9A1.5 1.5 0 0010.5 6h-1zM3.5 10A1.5 1.5 0 002 11.5v5A1.5 1.5 0 003.5 18h1A1.5 1.5 0 006 16.5v-5A1.5 1.5 0 004.5 10h-1z" />
                        </svg>
                    }
                    else
                    {
                        <span class="text-base font-bold">No Remaining Instructor Requests</span>
                        <span class="text-green-600">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                                <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd" />
                            </svg>
                        </span>
                    }
                }
                else
                {
                    <span class="text-base font-bold">All Instructor <br /> Requests</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                        <path fill-rule="evenodd" d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z" clip-rule="evenodd" />
                    </svg>
                }
            }
            else
            {
                <span class="text-base font-bold">No Instructor <br /> Requests</span>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                    <path fill-rule="evenodd" d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z" clip-rule="evenodd" />
                </svg>
            }
        </button>

        @{
            var wishlists = Filtered ? RemainingInstructorWishlists : AllInstructorWishlists;
        }

        @if (wishlists.Count() > 0)
        {
            foreach (var wishlist in wishlists)
            {
                var instructorCourse = InstructorSchedules?.FirstOrDefault(s => s.InstructorId == wishlist?.InstructorWishlist?.InstructorId);
                var wishlistTime = new TimeOnly(8, 0);

                <div class="relative text-neutral-700 bg-neutral-100/50 rounded-lg p-3 mt-2 mb-4">
                    @if (!RemainingInstructorWishlists.Contains(wishlist))
                    {
                        <span class="absolute z-10 -top-2 -right-2 text-white bg-green-600 rounded-full p-0.5">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                                <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd" />
                            </svg>
                        </span>
                    }
                    <div class="flex flex-col gap-3 mb-3 text-xs @(!RemainingInstructorWishlists.Contains(wishlist) ? "opacity-20" : "")">
                        <button class="flex justify-between items-center gap-2" @onclick=@(e => OnSelectInstructor.InvokeAsync(instructorCourse?.InstructorId))>
                            <span class="text-neutral-500 font-bold">Rank @wishlist.Ranking</span>
                            <span class="text-purple-800 font-bold">
                                @wishlist?.InstructorWishlist?.Instructor?.ApplicationUser?.FirstName
                                @wishlist?.InstructorWishlist?.Instructor?.ApplicationUser?.LastName
                            </span>
                        </button>
                        <div class="relative flex items-center rounded-full overflow-hidden">
                            <div class="absolute w-full text-center text-xs text-neutral-50">
                                @if (instructorCourse?.Load > 0)
                                {
                                    <text>@(instructorCourse?.Credits + instructorCourse?.ReleaseTime)/@instructorCourse?.Load</text>
                                }
                                else
                                {
                                    <text>@(instructorCourse?.Credits + instructorCourse?.ReleaseTime)</text>
                                }
                            </div>
                            @if (instructorCourse?.Load > 0)
                            {
                                if (instructorCourse?.Credits + instructorCourse?.ReleaseTime > instructorCourse?.Load)
                                {
                                    <div class="w-full bg-purple-600">
                                        <div class="@(instructorCourse?.Credits + instructorCourse?.ReleaseTime > 20 ? "bg-red-600" : "bg-amber-600") font-medium text-neutral-100 text-center h-full"
                                             style="width: @(100 * (instructorCourse?.Credits + instructorCourse?.ReleaseTime - instructorCourse?.Load) / instructorCourse?.Load)%">
                                            &nbsp;
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="w-full bg-neutral-700">
                                        <div class="bg-purple-600 font-medium text-neutral-100 text-center h-full"
                                             style="width: @(100 * (instructorCourse?.Credits + instructorCourse?.ReleaseTime) / instructorCourse?.Load)%">
                                            &nbsp;
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="w-full bg-neutral-700">
                                    <div class="@(instructorCourse?.Credits + instructorCourse?.ReleaseTime > 20 ? "bg-red-600" : "bg-amber-600") font-medium text-neutral-100 text-center h-full"
                                         style="width: 100%">
                                        &nbsp;
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="flex flex-wrap gap-1">
                            @foreach (var modality in wishlist?.Modalities ?? new List<Modality>())
                            {
                                <span class="@(WishlistSummaries.Select(w => w.Modality).Contains(modality) ? "bg-amber-300 font-bold" : "bg-neutral-100") rounded-full px-2 py-1">@modality.ModalityName</span>
                            }
                        </div>
                        @if ((wishlist?.Modalities ?? new List<Modality>()).Any(t => t.HasTimeBlocks) && wishlist?.TimeBlocks != null && wishlist?.TimeBlocks.Count > 0)
                        {
                            <div class="flex justify-between gap-2">
                                <span>@wishlist.DaysOfWeek</span>
                                <div class="flex gap-1 text-neutral-300">
                                    @for (int i = 0; i < 13; i++)
                                    {
                                        var wishlistTimeSpan = new TimeSpan(wishlistTime.Hour, 0, 0);

                                        <span class="@(wishlist.TimeBlocks.Any(t => wishlistTimeSpan >= t.StartTime && wishlistTimeSpan <= t.EndTime) ? "text-amber-600 font-bold" : "")">
                                            @(
                                                wishlistTime.Hour % 4 == 0 ?
                                                wishlistTime.Hour > 12 ?
                                                wishlistTime.Hour - 12 :
                                                wishlistTime.Hour
                                                : "•"
                                                )
                                        </span>

                                        wishlistTime = wishlistTime.AddHours(1);
                                    }
                                </div>
                            </div>
                        }
                        @if (wishlist?.Campuses != null && wishlist?.Campuses.Count > 0)
                        {
                            <div class="flex flex-wrap gap-1">
                                @foreach (var campus in wishlist.Campuses)
                                {
                                    <span class="@(WishlistSummaries.Select(w => w.Campus).Contains(campus) ? "bg-amber-300 font-bold" : "bg-neutral-100") rounded-full px-2 py-1">@campus.CampusName</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
}

@code {

    [Parameter]
    public Course? SelectedCourse { get; set; }

    [Parameter]
    public IEnumerable<Section> Sections { get; set; } = new List<Section>();

    [Parameter]
    public IEnumerable<InstructorSchedules>? InstructorSchedules { get; set; } = new List<InstructorSchedules>();

    [Parameter]
    public IEnumerable<InstructorWishlistCourse> AllInstructorWishlists { get; set; } = new List<InstructorWishlistCourse>();

    [Parameter]
    public IEnumerable<InstructorWishlistCourse> RemainingInstructorWishlists { get; set; } = new List<InstructorWishlistCourse>();

    [Parameter]
    public IEnumerable<WishlistSummary> WishlistSummaries { get; set; } = new List<WishlistSummary>();

    [Parameter]
    public EventCallback<int?> OnSelectInstructor { get; set; }

    private bool Filtered { get; set; } = true;

    private List<KeyValuePair<TimeSpan, string>> WishlistTimes { get; set; } = new List<KeyValuePair<TimeSpan, string>>();

    private bool Ready { get; set; }

    protected override void OnInitialized()
    {
        WishlistTimes = new List<KeyValuePair<TimeSpan, string>>
        {
            new KeyValuePair<TimeSpan, string>(new TimeSpan(8, 0, 0), "8"),
            new KeyValuePair<TimeSpan, string>(new TimeSpan(8, 0, 0), "&#9679;"),
        };
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Ready = false;

        foreach (var parameter in parameters)
        {
            if (parameter.Name == "SelectedCourse")
            {
                if (((Course)(parameter.Value ?? new Course()))?.Id != SelectedCourse?.Id)
                {
                    //reset the filter when the course changes
                    Filtered = true;
                }
            }
        }

        await base.SetParametersAsync(parameters);

        Ready = true;
    }

    private void ToggleFilter()
    {
        Filtered = !Filtered;
    }

}